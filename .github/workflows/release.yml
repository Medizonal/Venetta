name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build the release from'
        required: true
        default: 'main'

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code from specified branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller validators requests
        pip install -r requirements.txt || echo "No requirements.txt found"
      shell: bash

    - name: Build with PyInstaller
      run: pyinstaller --noconsole --onefile main.py
      shell: bash

    - name: Run Executable in Test Mode
      run: ./dist/main.exe --test
      shell: bash

    - name: Upload Screenshot Artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: test-screenshot
        path: screenshot.png

    - name: Generate Unique Release Name
      id: version
      shell: bash
      run: |
        base_date=$(date +'%d.%m.%y')
        counter=1
        while true; do
          if [ "$counter" -eq 1 ]; then
            prospective_name="Version $base_date"
            prospective_tag="Version-$base_date"
          else
            prospective_name="Version $base_date V$counter"
            prospective_tag="Version-$base_date-V$counter"
          fi
          if [ -z "$(git tag -l "$prospective_tag")" ]; then
            break
          else
            ((counter++))
          fi
        done
        echo "release_name=$prospective_name" >> "$GITHUB_OUTPUT"
        echo "tag_name=$prospective_tag" >> "$GITHUB_OUTPUT"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ steps.version.outputs.release_name }}
        tag_name: ${{ steps.version.outputs.tag_name }}
        files: |
          dist/main.exe
          screenshot.png
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
