name: Build and Release EXE

on:
  push:
    branches: [ main ]

jobs:
  analyze:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.validate.outputs.match }}
      build_number: ${{ steps.validate.outputs.build_number }}
      message: ${{ steps.commit.outputs.message }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get commit message
      id: commit
      shell: bash
      run: |
        msg="$(git log -1 --pretty=%B)"
        echo "message=$msg" >> $GITHUB_OUTPUT

    - name: Validate commit message
      id: validate
      shell: bash
      run: |
        if [[ "${{ steps.commit.outputs.message }}" =~ ^Build[[:space:]]+([0-9]+)$ ]]; then
          echo "match=true" >> $GITHUB_OUTPUT
          echo "build_number=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
        else
          echo "match=false" >> $GITHUB_OUTPUT
        fi

  release:
    needs: analyze
    if: needs.analyze.outputs.should_release == 'true'
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt || echo "No requirements.txt found"
      shell: bash

    - name: Build with PyInstaller
      run: pyinstaller --noconsole --onefile main.py
      shell: bash

    - name: Generate release notes
      id: notes
      shell: bash
      run: |
        git fetch --tags
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$latest_tag" ]; then
          git log "$latest_tag"..HEAD --pretty=format:"- %h %s by @%an" > release_notes.md
        else
          git log --pretty=format:"- %h %s by @%an" > release_notes.md
        fi

        {
          echo "release_body<<EOF"
          echo "Changes in Build ${{ needs.analyze.outputs.build_number }}:"
          cat release_notes.md
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Upload EXE to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Build ${{ needs.analyze.outputs.build_number }}
        tag_name: build-${{ needs.analyze.outputs.build_number }}
        body: ${{ steps.notes.outputs.release_body }}
        files: dist/main.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
