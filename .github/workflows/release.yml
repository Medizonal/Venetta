name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build the release from'
        required: true
        default: 'main'

jobs:
  build:
    runs-on: windows-latest
    outputs:
      release_name: ${{ steps.version.outputs.release_name }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt || echo "No requirements.txt found"
      shell: bash

    - name: Build with PyInstaller
      run: pyinstaller --noconsole --onefile main.py
      shell: bash

    - name: Generate Unique Release Name
      id: version
      shell: bash
      run: |
        base_date=$(date +'%d.%m.%y')
        counter=1
        while true; do
          if [ "$counter" -eq 1 ]; then
            name="Version $base_date"
            tag="Version-$base_date"
          else
            name="Version $base_date V$counter"
            tag="Version-$base_date-V$counter"
          fi
          if [ -z "$(git tag -l "$tag")" ]; then
            break
          else
            ((counter++))
          fi
        done
        echo "release_name=$name" >> "$GITHUB_OUTPUT"
        echo "tag_name=$tag" >> "$GITHUB_OUTPUT"

    - name: Upload built app
      uses: actions/upload-artifact@v4
      with:
        name: main-exe
        path: dist/main.exe

  test-gui:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Download built app
      uses: actions/download-artifact@v4
      with:
        name: main-exe
        path: ./dist

    - name: Make executable
      run: chmod +x ./dist/main.exe

    - name: Install Xvfb and screenshot tools
      run: |
        sudo apt update
        sudo apt install -y xvfb scrot

    - name: Start virtual display and run GUI test
      run: |
        Xvfb :99 -screen 0 1920x1080x24 &
        export DISPLAY=:99
        ./dist/main.exe --test &
        sleep 3  # wait for GUI to appear
        scrot screenshot.png

    - name: Upload Screenshot
      uses: actions/upload-artifact@v4
      with:
        name: test-screenshot
        path: screenshot.png

  release:
    runs-on: windows-latest
    needs: [build, test-gui]
    permissions:
      contents: write

    steps:
    - name: Download executable
      uses: actions/download-artifact@v4
      with:
        name: main-exe
        path: dist

    - name: Download Screenshot
      uses: actions/download-artifact@v4
      with:
        name: test-screenshot
        path: screenshot

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ needs.build.outputs.release_name }}
        tag_name: ${{ needs.build.outputs.tag_name }}
        files: |
          dist/main.exe
          screenshot/screenshot.png
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
