name: Build and Release EXE

on:
  push:
    branches: [ main ]

jobs:
  analyze:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.validate.outputs.match }}
      build_number: ${{ steps.validate.outputs.build_number }}
      message: ${{ steps.commit.outputs.message }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get commit message (multiline safe)
      id: commit
      shell: bash
      run: |
        msg="$(git log -1 --pretty=%B)"
        {
          echo "message<<EOF"
          echo "$msg"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Validate commit message
      id: validate
      shell: bash
      run: |
        commit_msg="${{ steps.commit.outputs.message }}"
        commit_msg_lower="${commit_msg,,}"
        if [[ "$commit_msg_lower" =~ build[[:space:]]+([0-9]+) ]]; then
          echo "match=true" >> "$GITHUB_OUTPUT"
          echo "build_number=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
        else
          echo "match=false" >> "$GITHUB_OUTPUT"
        fi

  release:
    needs: analyze
    if: needs.analyze.outputs.should_release == 'true'
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # No fetch-depth needed here because the release generator
      # uses the GitHub API, not the local git history.

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt || echo "No requirements.txt found"
      shell: bash

    - name: Build with PyInstaller
      run: pyinstaller --noconsole --onefile main.py
      shell: bash

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Build ${{ needs.analyze.outputs.build_number }}
        tag_name: build-${{ needs.analyze.outputs.build_number }}
        # This is the key change: tell the action to use GitHub's
        # built-in note generator. It will automatically create a
        # beautiful, categorized changelog for you.
        generate_release_notes: true
        files: dist/main.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
